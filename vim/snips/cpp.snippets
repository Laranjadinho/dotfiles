extends c

snippet ans "namespace {}" b
namespace {

${0:${VISUAL}}

} // anonymous namespace
endsnippet

snippet ns "namespace foo {}" b
namespace ${1} {

${0:${VISUAL}}

}${1/(\w+)/ \/\/ namespace $1/}
endsnippet

snippet uns "using namespace std;"
using namespace ${1:std};$0
endsnippet

snippet enum "enum name {}" b
enum ${1:enum_name} {
  $2
};$0
endsnippet

snippet enumc "enum class name {}" b
enum class ${1:enum_name} {
  $2
};$0
endsnippet

snippet struct "struct name {}" b
struct ${1:struct_name} {
  $2
};$0
endsnippet

snippet class "class Name {};" b
class ${1:MyClass} {
private:
  $3
public:
  $1() = default;
  $1(const $1 &other) = default;
  $1 &operator=(const $1 &other) = default;
  ~$1() = default;
};$0
endsnippet

snippet temp "template <typename T>"
template <typename ${1:T}>$0
endsnippet

snippet fore "for (auto &a : b) {}" b
for (auto &${1:item} : ${2:container}) {
  ${0:${VISUAL}}
}
endsnippet

snippet cfore "for (const auto &a : b) {}" b
for (const auto &${1:item} : ${2:container}) {
  ${0:${VISUAL}}
}
endsnippet

snippet cout "std::cout << std::endl;"
std::cout << ${1:"Hello, World!"} << std::endl;$0
endsnippet

snippet cerr "std::cerr << std::endl;"
std::cerr << ${1:"Hello, World!"} << std::endl;$0
endsnippet

snippet mup "std::make_unique<>()"
std::make_unique<${1:T}>(${2:${VISUAL}});$0
endsnippet

snippet msp "std::make_shared<>()"
std::make_shared<${1:T}>(${2:${VISUAL}});$0
endsnippet

snippet up "std::unique_ptr<T> up;"
std::unique_ptr<${1:T}> ${2:up};$0
endsnippet

snippet sp "std::shared_ptr<T> up;"
std::shared_ptr<${2:T}> ${2:sp};$0
endsnippet

snippet vec "std::vector<T> vec;"
std::vector<${1:T}> ${2:vec};$0
endsnippet

snippet map "std::map<K, V> map;"
std::map<${1:K}, ${2:V}> ${4:map};$0
endsnippet
