# ------------------------------------------------------------------------------
# Top level snippets
# ------------------------------------------------------------------------------

snippet main "fn main() {}" b
fn main() {
    ${1:println!("Hello, World!");}
}
endsnippet

snippet mainr "fn main() -> Result<i32, String>" b
fn main() -> Result<(), String> {
    ${1:println!("Hello, World!");}
    Ok(())
}
endsnippet

snippet fn "fn name() -> {}" b
fn ${1:function_name}($2)${3/.+/ -> /}${3:()} {
    ${4:${VISUAL:unimplemented!()}}
}
endsnippet

snippet pfn "pub fn name() -> {}" b
pub fn ${1:function_name}($2)${3/.+/ -> /}${3:()} {
    ${4:${VISUAL:unimplemented!()}}
}
endsnippet

snippet tfn "#[test] fn name()" b
#[test]
fn ${1:test_name}() {
    ${2:${VISUAL:unimplemented!()}}
}
endsnippet

snippet mod "mod name {}" w
mod ${1:`!p snip.rv = snip.basename.lower() or "name"`} {
    ${2:${VISUAL}}
}
endsnippet

snippet struct "struct name {}" w
struct ${1:type_name} {
    ${2:value: i32,}
}
endsnippet

snippet tstruct "struct name(i32)" w
struct ${1:type_name}($2);
endsnippet

snippet trait "trait name {}" w
trait ${1:name} {
    ${2:fn new($3) -> Self;}$0
}
endsnippet

snippet impl "impl type {}" b
impl ${1:T}${2/.+/ for /}${2:U} {
    ${4:${VISUAL}}
}
endsnippet

snippet enum "enum {}" w
enum ${1:type_name} {
    ${2:EnumValue,}
}
endsnippet

snippet derive "#[derive(Trait)]" b
#[derive(${1:Trait})]
endsnippet

# ------------------------------------------------------------------------------
# Statements
# ------------------------------------------------------------------------------

snippet let "let var = value;" w
let ${1:variable} = ${2:value};
endsnippet

snippet mlet "let var = value;" w
let mut ${1:variable} = ${2:value};
endsnippet

snippet ilet "if let Some(_) = value {}" w
if let ${1:Some(i)} = ${2:value} {
    ${3:${VISUAL}}
}
endsnippet

snippet wlet "while let Some(_) = value {}" w
while let ${1:Some(i)} = ${2:value} {
    ${3:${VISUAL}}
}
endsnippet

snippet if "if expr {}" w
if ${1:expr} {
    ${2:${VISUAL}}
}
endsnippet

snippet elif "else if expr {}" w
else if ${1:expr} {
    ${2:${VISUAL}}
}
endsnippet

snippet else "else {}" w
else {
    ${2:${VISUAL}}
}
endsnippet

snippet loop "loop {}" w
loop {
    ${1:${VISUAL}}
}
endsnippet

snippet while "while expr {}" w
while ${1:expr} {
    ${2:${VISUAL}}
}
endsnippet

snippet for "for variable in collection {}" w
for ${1:variable} in ${2:iterator} {
    ${3:${VISUAL}}
}
endsnippet

snippet match "match expr {}" w
match ${1:expr} {
    ${2:// case}
    ${3:_ => panic!("Unexpected value!"),}
}
endsnippet

snippet case "left => right," b
${1:left} => ${2:right},
endsnippet

snippet p "println!();" w
println!("${1:\{\}}", $2);
endsnippet

snippet pe "eprintln!();" w
eprintln!("${1:\{\}}", $2);
endsnippet

snippet aeq "assert_eq!" w
assert_eq!(${1:()}, ${2:()});
endsnippet

snippet ane "assert_ne!" w
assert_ne!(${1:()}, ${2:()});
endsnippet

# ------------------------------------------------------------------------------
# Types
# ------------------------------------------------------------------------------

snippet opt "Option<T>" w
Option<${1:${VISUAL:T}}>
endsnippet

snippet res "Result<T, Error>" w
Result<${1:${VISUAL:T}}, ${2:Error}>
endsnippet
